#summary A sample configuration file for the ResponseHeaderFilter
{{{
<?xml version="1.0" encoding="UTF-8" ?>
<response-header-mapper>
  <!-- Default headers for all AJAX requests. Don't cache any such request -->
  <mapping url="/ajax/*.html">
    <default>
      <response-headers>
	<header key="Content-Type" value="text/xml"/>
        <header key="Cache-Control" value="no-cache"/>
      </response-headers>
    </default>

    <!-- 
     If one of your AJAX handlers was fetching a list of cities or countries 
     (which thankfully don't change very often), you would want the browser to cache
     these the response and that too for a significantly longer time.
     
     The ResponseHeaderFilter gives you the power of <conditional> mappings,
     wherein you can have mappings based on a query parameter in the request 
     and its expected value (which can be a Pattern)

     Instruction to cache all "/ajax/*.html?fetch=country" or "/ajax/*.html?fetch=city" 
     requests for a day
    -->

    <conditional queryParamName="type" queryParamValue="(country|city)">
      <response-headers>
	<header key="Content-Type" value="text/xml"/>
        <header key="Cache-Control" value="private, max-age=86400"/>
      </response-headers>
    </conditional>
  </mapping>

  <!-- cache all "(.*).js" requests for 30 days -->
  <mapping url="(.*).js">
    <default>
      <response-headers>
	<header key="X-Server" value="MyServer"/>
	<header key="Content-Type" value="application/x-javascript"/>
        <header key="Cache-Control" value="public, max-age=2592000"/>
      </response-headers>
    </default>
  </mapping>

  <!-- keep the http connection alive for all json requests -->
  <mapping url="/json/(.*)">
    <default>
      <response-headers>
	<header key="Content-Type" value="application/json"/>
        <header key="Connection" value="Keep-Alive"/>
      </response-headers>
    </default>
  </mapping>
</response-header-mapper>
}}}
<br/>
----
<br/>
= Next =
  # Get minute details on the node elements and their attributes in the configuration [http://code.google.com/p/responseheaderfilter/wiki/ConfigXml here].
  # Interested in implementing a custom behaviour? Learn how to [http://code.google.com/p/responseheaderfilter/wiki/ExtendingTheAPI extend this API].
  # Learn how to [http://code.google.com/p/responseheaderfilter/#Getting_started get started] on this filter in your webapp.